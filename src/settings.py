"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

from common.configs.config import config as cfg
import dotenv
from pathlib import Path

dotenv_path = Path("/home/ubuntu/.env")
dotenv.load_dotenv(dotenv_path=dotenv_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-e15go*%!p@q)br$qj#5y!2ci8@-awh5c0+bbk5gh=!yx2$%(4m"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(cfg.get("common", "DEBUG", fallback=False))

ALLOWED_HOSTS = [
    "localhost",
    "0.0.0.0",
    "127.0.0.1",
    "micro.worke.io",
    "services.worke.io",
    "staging.worke.io",
    "stageservices.worke.io",
    "demoservices.worke.io",
]

# Sentry Settings
sentry_sdk.init(
    dsn=cfg.get("sentry", "DSN"),
    # debug=bool(cfg.get("common", "SENTRY_DEBUG", fallback=True)),
    integrations=[DjangoIntegration()],
    traces_sample_rate=float(cfg.get("sentry", "SAMPLE_RATE")),
    send_default_pii=True,
)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # external packages
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_yasg",
    "corsheaders",
    "silk",
    "django_prometheus",
    # created apps
    "users",
    "organisation",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # to check for token add user field in request
    "common.middlewares.jwt_middleware.JWTMiddleware",
    "silk.middleware.SilkyMiddleware",
    "BaseWorke.middlewares.new_relic_middleware.NewRelicMiddleware",
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

# for future case
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": (
        "common.auth.authentication.IsAuthenticatedOverride",
    ),
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "EXCEPTION_HANDLER": "common.helpers.exception_helper.customExceptionHandler",
}

# Authentication backends
AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend",)

JWT_SECRET = "6ZzpCA9Qb9wc@ffzj9d4u9LP5vPdWK3tEBATpUYNZTDTYYP7jCW4FhEPSN8Rij#Q@Zhu32mECQllGk1S*VH5*jHi^OCvIL5YUdRahDnfLQ!Y06pBiMFRdYT7Wv$mrrMt"
# Simple JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "id",
    "SIGNING_KEY": JWT_SECRET,
}

ROOT_URLCONF = "src.urls"

# Swagger Auth settings :
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"},
    }
}

# CORS_ALLOWED_ORIGINS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "src.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": cfg.get("postgres", "DB_NAME"),
        "USER": cfg.get("postgres", "DB_USER"),
        "PASSWORD": cfg.get("postgres", "DB_PASSWORD"),
        # "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": cfg.get("postgres", "DB_HOST"),
        "PORT": cfg.get("postgres", "DB_PORT"),
        "OPTIONS": {"options": "-c search_path=" + cfg.get("postgres", "DB_SCHEMA")},
    }
}

DATABASE_ROUTERS = [
    "common.database.db_routers.DefaultRouter",
]


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_DIR, "static")
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


DEFAULT_FROM_EMAIL = "support@worke.app"
DEFAULT_REPLY_EMAIL = "support@worke.app"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtppro.zoho.in"
EMAIL_HOST_USER = "support@worke.app"
EMAIL_HOST_PASSWORD = "1w9ai32iyGdQN63@"
EMAIL_PORT = 587
EMAIL_USE_TLS = True


NEW_RELIC_API_KEY = "NRAK-RSB00ZI5WBBSIMX26GBNU157AL6"
NEW_RELIC_URL = "https://log-api.newrelic.com/log/v1?Api-Key="
